Chapter XX, visualizing the nearest neighbors classifier

In this chapter we will explore several interactive data
visualizations of the K-Nearest Neighbors (KNN) classifier.

We start by reproducing a static version of Figure 13.4 from Elements
of Statistical Learning by Hastie et al. That Figure consists of two
plots:
- mis-classification error curves, as a function of the number of
  neighbors:
  - geom_line and geom_point for the error curves.
  - geom_linerange for error bars of the validation error curve.
  - geom_hline for the Bayes error.
  - x = neighbors.
  - y = percent error.
  - color = error type.
- data and decision boundaries in the two-dimensional input feature
  space.
  - geom_point for the data points.
  - geom_point for the classification predictions on the grid in the
    background.
  - geom_path for the decision boundaries.
  - geom_text for the train/test/Bayes error rates.

#+BEGIN_SRC R
  library(ElemStatLearn)
  data(mixture.example)
  input.cols <- c("X1", "X2")
  str(mixture.example)
  
  ## create a test set, from help(mixture.example)
  library(MASS)
  set.seed(123)
  centers <- c(sample(1:10, 5000, replace=TRUE), 
               sample(11:20, 5000, replace=TRUE))
  mix.test <- mvrnorm(10000, c(0,0), 0.2*diag(2))
  test.points <- data.frame(
    mix.test + mixture.example$means[centers,],
    label=factor(c(rep(0, 5000), rep(1, 5000))))
  
  ## Combine grid and test points.
  mixture <- with(mixture.example, data.frame(x, label=factor(y)))
  pred.grid <- data.frame(mixture.example$xnew, label=NA)
  names(pred.grid)[1:2] <- input.cols
  not.train <- rbind(
    data.frame(test.points, set="test"),
    data.frame(pred.grid, set="grid"))
  not.train$fold <- NA
  
  library(class)
  library(data.table)
  OneFold <- function(validation.fold){
    set <- ifelse(mixture$fold == validation.fold, "validation", "train")
    fold.data <- rbind(not.train, data.frame(mixture, set))
    fold.data$data.i <- 1:nrow(fold.data)
    train.df <- subset(fold.data, set == "train")
    data.by.neighbors <- list()
    for(neighbors in seq(1, 30, by=2)){
      cat(sprintf("n.folds=%4d validation.fold=%d neighbors=%d\n",
                  n.folds, validation.fold, neighbors))
      pred.label <- 
        knn(train.df[, input.cols],
            fold.data[, input.cols],
            train.df$label,
            k=neighbors,
            prob=TRUE)
      prob.winning.class <- attr(pred.label, "prob")
      fold.data$probability <- ifelse(
        pred.label=="1", prob.winning.class, 1-prob.winning.class)
      data.by.neighbors[[paste(neighbors)]] <- 
        data.table(neighbors, fold.data)
    }#for(neighbors
    do.call(rbind, data.by.neighbors)
  }#for(validation.fold
  
  ## My 10-fold cross-validation split.
  n.folds <- 10
  set.seed(2)
  mixture$fold <- sample(rep(1:n.folds, l=nrow(mixture)))
  library(doParallel)
  registerDoParallel()
  data.all.folds <- foreach(validation.fold=0:10, .combine=rbind) %dopar% {
    one.fold <- OneFold(validation.fold)
    data.table(validation.fold, one.fold)
  }
  
  data.all.folds[, pred.label := ifelse(0.5 < probability, "1", "0")]
  data.all.folds[, is.error := label != pred.label]
  labeled.data <- data.all.folds[!is.na(label),]
  
  error.stats <- labeled.data[, list(
    error.prop=mean(is.error)
    ), by=.(set, validation.fold, neighbors)]
  validation.error <- error.stats[set=="validation", list(
    mean=mean(error.prop),
    sd=sd(error.prop)/sqrt(.N)
    ), by=.(set, neighbors)]
  other.error <- error.stats[validation.fold==0,]
  
  ## Get the subset of data that is shown in the original Figure.
  show.neighbors <- 7
  neighbors.dt <- data.table(neighbors=show.neighbors)
  show.data <- data.all.folds[validation.fold==0 & neighbors==show.neighbors,]
  show.points <- show.data[set=="train",]
  boundary.grid <- show.data[set=="grid",]
  boundary.grid[, label := pred.label]
  
  ## train/test/Bayes error text box.
  text.height <- 0.2
  max.X1 <- 0
  min.X2 <- min(boundary.grid$X2)
  min.X1 <- min(boundary.grid$X1)
  Bayes.error <- data.table(
    set="Bayes",
    validation.fold=NA,
    neighbors=NA,
    error.prop=0.21)
  error.text <- rbind(
    Bayes.error,
    other.error[neighbors==show.neighbors,])
  error.text[, X2.top := min.X2 + text.height * (1:.N)]
  error.text[, X2.bottom := X2.top - text.height]
  on.text <- function(X1, X2){
    X2 <= max(error.text$X2.top) & X1 <= max.X1
  }
  show.grid <- boundary.grid[!on.text(X1, X2),]
  
  ## Also compute decision boundaries.
  getBoundaryDF <- function(prob.vec){
    stopifnot(length(prob.vec) == 6831)
    several.paths <- with(mixture.example, contourLines(
      px1, px2,
      matrix(prob.vec, length(px1), length(px2)),
      levels=0.5))
    contour.list <- list()
    for(path.i in seq_along(several.paths)){
      contour.list[[path.i]] <- with(several.paths[[path.i]], data.table(
        path.i, X1=x, X2=y))
    }
    do.call(rbind, contour.list)
  }
  pred.boundary <- getBoundaryDF(boundary.grid$probability)
  pred.boundary$boundary <- "predicted"
  Bayes.boundary <- getBoundaryDF(mixture.example$prob)
  Bayes.boundary$boundary <- "Bayes"
  
  ##dput(RColorBrewer::brewer.pal(Inf, "Set1"))
  label.colors <-
    c("#E41A1C",
      "0"="#377EB8", "#4DAF4A", "#984EA3",
      "1"="#FF7F00", "#FFFF33", 
      "#A65628", "#F781BF", "#999999")
  ##dput(RColorBrewer::brewer.pal(Inf, "Set1"))
  set.colors <-
    c("#E41A1C",
      test="#377EB8",
      validation="#4DAF4A",
      Bayes="#984EA3",
      train="#FF7F00", "#FFFF33", 
      "#A65628", "#F781BF", "#999999")
  scatterPlot <- ggplot()+
    theme_bw()+
    theme(axis.text=element_blank(),
          axis.ticks=element_blank(),
          axis.title=element_blank())+
    ggtitle("7-Nearest Neighbors")+
    scale_color_manual(values=label.colors)+
    scale_linetype_manual(values=c(Bayes="dashed", predicted="solid"))+
    geom_point(aes(X1, X2, color=label),
               size=0.2,
               data=show.grid)+
    geom_path(aes(X1, X2, group=paste(boundary, path.i),
                  linetype=boundary),
              size=1,
              data=pred.boundary)+
    geom_path(aes(X1, X2, group=paste(boundary, path.i),
                  linetype=boundary),
              color=set.colors[["Bayes"]],
              size=1,
              data=Bayes.boundary)+
    geom_point(aes(X1, X2, color=label),
               fill=NA,
               size=3,
               shape=21,
               data=show.points)+
    geom_text(aes(min.X1, X2.bottom, label=paste(set, "Error:")),
              data=error.text,
              hjust=0)+
    geom_text(aes(max.X1, X2.bottom, label=sprintf("%.3f", error.prop)),
              data=error.text,
              hjust=1)
  print(scatterPlot)
  
  errorPlot <- ggplot()+
    geom_hline(aes(yintercept=error.prop, color=set, linetype=set),
               data=Bayes.error)+
    scale_color_manual("error type", values=set.colors, breaks=names(set.colors))+
    scale_linetype_manual("error type", values=c(
      train="solid",
      validation="solid",
      test="solid",
      Bayes="dashed"),
      breaks=names(set.colors))+
    ylab("Misclassification Errors")+
    xlab("Number of Neighbors")+
    geom_linerange(aes(neighbors, ymin=mean-sd, ymax=mean+sd,
                       color=set),
                  data=validation.error)+
    geom_line(aes(neighbors, mean, linetype=set, color=set),
              data=validation.error)+
    geom_line(aes(neighbors, error.prop, group=set, linetype=set, color=set),
              data=other.error)+
    geom_point(aes(neighbors, mean, color=set),
               data=validation.error)+
    geom_point(aes(neighbors, error.prop, color=set),
               data=other.error)
  print(errorPlot)
  
  viz.static <- list(
    title="Figure 13.4 from Elements of Statistical Learning by Hastie et al",
    error=errorPlot,
    data=scatterPlot
    )
  library(animint)
  structure(viz.static, class="animint")
  
  ## Re-design.
  show.data <- data.all.folds[validation.fold==0,]
  show.points <- show.data[set=="train",]
  boundary.grid <- show.data[set=="grid",]
  boundary.grid[, label := pred.label]
  pred.boundary <- boundary.grid[, getBoundaryDF(probability), by=neighbors]
  pred.boundary$boundary <- "predicted"
  show.grid <- boundary.grid[!on.text(X1, X2),]
  show.text <- show.grid[, list(
    X1=mean(range(X1)), X2=3.05), by=neighbors]
  
  ## train/test/Bayes error text box.
  text.height <- 0.2
  max.X1 <- 0
  min.X2 <- min(boundary.grid$X2)
  min.X1 <- min(boundary.grid$X1)
  other.error[, X2.bottom := min.X2 + text.height * 1:2]
  
  Bayes.error <- data.table(
    set="Bayes",
    error.prop=0.21)
  ##dput(RColorBrewer::brewer.pal(Inf, "Set1"))
  set.colors <-
    c("#E41A1C",
      validation="#4DAF4A",
      test="#984EA3",
      train="#FF7F00", "#FFFF33", 
      "#A65628", "#F781BF", "#999999")
  scatterPlot <- ggplot()+
    theme_bw()+
    xlab("Input feature 1")+
    ylab("Input feature 2")+
    scale_color_manual(values=label.colors)+
    scale_linetype_manual(values=c(Bayes="dashed", predicted="solid"))+
    geom_point(aes(X1, X2, color=label,
                   showSelected=neighbors),
               size=0.2,
               data=show.grid)+
    geom_path(aes(X1, X2, group=paste(boundary, path.i),
                  linetype=boundary, showSelected=neighbors),
              size=1,
              data=pred.boundary)+
    geom_path(aes(X1, X2, group=paste(boundary, path.i),
                  linetype=boundary),
              color=set.colors[["test"]],
              size=1,
              data=Bayes.boundary)+
    geom_point(aes(X1, X2, color=label,
                   fill=is.error,
                   showSelected=neighbors),
               size=3,
               shape=21,
               data=show.points)+
    scale_fill_manual(values=c("TRUE"="black", "FALSE"="transparent"))+
    geom_text(aes(min.X1, min.X2, label=paste(set, "Error:")),
              data=Bayes.error,
              hjust=0)+
    geom_text(aes(max.X1, min.X2, label=sprintf("%.3f", error.prop)),
              data=Bayes.error,
              hjust=1)+
    geom_text(aes(min.X1, X2.bottom, label=paste(set, "Error:"),
                  showSelected=neighbors),
              data=other.error,
              hjust=0)+
    geom_text(aes(max.X1, X2.bottom, label=sprintf("%.3f", error.prop),
                  showSelected=neighbors),
              data=other.error,
              hjust=1)+
    geom_text(aes(X1, X2,
                  showSelected=neighbors,
                  label=paste0(
                    neighbors,
                    " nearest neighbor",
                    ifelse(neighbors==1, "", "s"),
                    " classifier")),
              data=show.text)
  print(scatterPlot+facet_wrap("neighbors")+theme(panel.margin=grid::unit(0, "lines")))
  
  Bayes.segment <- data.table(
    Bayes.error,
    min.neighbors=1,
    max.neighbors=29)
  Bayes.segment$set <- "test"
  Bayes.segment$error <- "Bayes"
  validation.error$error <- "KNN"
  other.error$error <- "KNN"
  errorPlot <- ggplot()+
    ggtitle("Select number of neighbors")+
    geom_text(aes(min.neighbors, error.prop,
                  color=set, label="Bayes",
                  showSelected=error),
              hjust=1,
              data=Bayes.segment)+
    geom_segment(aes(min.neighbors, error.prop,
                     xend=max.neighbors, yend=error.prop,
                     color=set, linetype=error),
                 data=Bayes.segment)+
    scale_color_manual(values=set.colors, breaks=names(set.colors))+
    scale_fill_manual(values=set.colors)+
    guides(fill="none")+
    scale_linetype_manual("error", values=c(
      KNN="solid",
      Bayes="dashed"))+
    ylab("Misclassification Errors")+
    scale_x_continuous(
      "Number of Neighbors",
      limits=c(-1, 30),
      breaks=c(1, 10, 20, 29))+
    geom_ribbon(aes(neighbors, ymin=mean-sd, ymax=mean+sd,
                    fill=set,
                    showSelected=error,
                    showSelected2=set),
                alpha=0.5,
                data=validation.error)+
    geom_line(aes(neighbors, mean,
                  linetype=error, color=set),
              data=validation.error)+
    geom_line(aes(neighbors, error.prop, group=set,
                  linetype=error, color=set),
              data=other.error)+
    geom_tallrect(aes(xmin=neighbors-1, xmax=neighbors+1,
                      clickSelects=neighbors),
                  alpha=0.5,
                  data=validation.error)
  print(errorPlot)
  
  viz.neighbors <- list(
    title="K-Nearest Neighbors in Mixture Example",
    error=errorPlot,
    data=scatterPlot,
    first=list(neighbors=7),
    time=list(variable="neighbors", ms=3000)
    )
  structure(viz.neighbors, class="animint")
#+END_SRC


