Chapter XX, visualizing the nearest neighbors classifier

In this chapter we will explore several interactive data
visualizations of the K-Nearest Neighbors (KNN) classifier.

We start by reproducing a static version of Figure 13.4 from Elements
of Statistical Learning by Hastie et al. That Figure consists of two
plots:
- mis-classification error curves, as a function of the number of
  neighbors:
  - geom_line and geom_point for the error curves.
  - geom_linerange for error bars of the validation error curve.
  - geom_hline for the Bayes error.
  - x = neighbors.
  - y = percent error.
  - color = error type.
- data and decision boundaries in the two-dimensional input feature
  space.
  - geom_point for the data points.
  - geom_point for the classification predictions on the grid in the
    background.
  - geom_path for the decision boundaries.
  - geom_text for the train/test/Bayes error rates.

#+BEGIN_SRC R
  library(class)
  library(data.table)
  library(ElemStatLearn)
  data(mixture.example)

  input.cols <- c("X1", "X2")

  ## create a test set, from help(mixture.example)
  library(MASS)
  set.seed(123)
  centers <- c(sample(1:10, 5000, replace=TRUE), 
               sample(11:20, 5000, replace=TRUE))
  mix.test <- mvrnorm(10000, c(0,0), 0.2*diag(2))
  test.points <- data.frame(
    mix.test + mixture.example$means[centers,],
    label=factor(c(rep(0, 5000), rep(1, 5000))))

  ## Combine grid and test points.
  mixture <- with(mixture.example, data.frame(x, label=factor(y)))
  pred.grid <- data.frame(mixture.example$xnew, label=NA)
  names(pred.grid)[1:2] <- input.cols
  not.train <- rbind(
    data.frame(test.points, set="test"),
    data.frame(pred.grid, set="grid"))
  not.train$fold <- NA

  OneFold <- function(validation.fold){
    set <- ifelse(mixture$fold == validation.fold, "validation", "train")
    fold.data <- rbind(not.train, data.frame(mixture, set))
    fold.data$data.i <- 1:nrow(fold.data)
    train.df <- subset(fold.data, set == "train")
    data.by.neighbors <- list()
    for(neighbors in seq(1, 30, by=2)){
      cat(sprintf("n.folds=%4d validation.fold=%d neighbors=%d\n",
                  n.folds, validation.fold, neighbors))
      pred.label <- 
	knn(train.df[, input.cols],
            fold.data[, input.cols],
            train.df$label,
            k=neighbors,
            prob=TRUE)
      prob.winning.class <- attr(pred.label, "prob")
      fold.data$probability <- ifelse(
	pred.label=="1", prob.winning.class, 1-prob.winning.class)
      data.by.neighbors[[paste(neighbors)]] <- 
	data.table(neighbors, fold.data)
    }#for(neighbors
    do.call(rbind, data.by.neighbors)
  }#for(validation.fold

  ## My 10-fold cross-validation split.
  n.folds <- 10
  set.seed(2)
  mixture$fold <- sample(rep(1:n.folds, l=nrow(mixture)))
  library(doParallel)
  registerDoParallel()
  data.all.folds <- foreach(validation.fold=0:10, .combine=rbind) %dopar% {
    one.fold <- OneFold(validation.fold)
    data.table(validation.fold, one.fold)
  }

  data.all.folds[, pred.label := ifelse(0.5 < probability, "1", "0")]
  data.all.folds[, is.error := label != pred.label]
  labeled.data <- data.all.folds[!is.na(label),]

  error.stats <- labeled.data[, list(
    error.prop=mean(is.error)
    ), by=.(set, validation.fold, neighbors)]
  validation.error <- error.stats[set=="validation", list(
    mean=mean(error.prop),
    sd=sd(error.prop)/sqrt(.N)
    ), by=.(set, neighbors)]
  other.error <- error.stats[validation.fold==0,]

  ## Get the subset of data that is shown in the original Figure.
  show.neighbors <- 7
  neighbors.dt <- data.table(neighbors=show.neighbors)
  show.data <- data.all.folds[validation.fold==0 & neighbors==show.neighbors,]
  pred.grid <- show.data[set=="grid",]
  pred.grid[, label := pred.label]

  ## train/test/Bayes error text box.
  text.height <- 0.2
  max.X1 <- 0
  min.X2 <- min(pred.grid$X2)
  min.X1 <- min(pred.grid$X1)
  Bayes.error <- data.table(
    set="Bayes",
    validation.fold=NA,
    neighbors=NA,
    error.prop=0.21)
  error.text <- rbind(
    Bayes.error,
    other.error[neighbors==show.neighbors,])
  error.text[, X2.top := min.X2 + text.height * (1:.N)]
  error.text[, X2.bottom := X2.top - text.height]
  on.text <- function(X1, X2){
    X2 <= max(error.text$X2.top) & X1 <= max.X1
  }
  show.grid <- pred.grid[!on.text(X1, X2),]

  ## Also compute decision boundaries.
  getBoundaryDF <- function(prob.vec){
    stopifnot(length(prob.vec) == 6831)
    several.paths <- with(mixture.example, contourLines(
      px1, px2,
      matrix(prob.vec, length(px1), length(px2)),
      levels=0.5))
    contour.list <- list()
    for(path.i in seq_along(several.paths)){
      contour.list[[path.i]] <- with(several.paths[[path.i]], data.table(
	path.i, X1=x, X2=y))
    }
    do.call(rbind, contour.list)
  }
  pred.boundary <- getBoundaryDF(pred.grid$probability)
  pred.boundary$boundary <- "predicted"
  Bayes.boundary <- getBoundaryDF(mixture.example$prob)
  Bayes.boundary$boundary <- "Bayes"

  ##dput(RColorBrewer::brewer.pal(Inf, "Set1"))
  label.colors <-
    c("#E41A1C",
      "0"="#377EB8", "#4DAF4A", "#984EA3",
      "1"="#FF7F00", "#FFFF33", 
      "#A65628", "#F781BF", "#999999")
  ##dput(RColorBrewer::brewer.pal(Inf, "Set1"))
  set.colors <-
    c("#E41A1C",
      test="#377EB8",
      validation="#4DAF4A",
      Bayes="#984EA3",
      train="#FF7F00", "#FFFF33", 
      "#A65628", "#F781BF", "#999999")
  scatterPlot <- ggplot()+
    theme_bw()+
    theme(axis.text=element_blank(),
          axis.ticks=element_blank(),
          axis.title=element_blank())+
    ggtitle("7-Nearest Neighbors")+
    scale_color_manual(values=label.colors)+
    scale_linetype_manual(values=c(Bayes="dashed", predicted="solid"))+
    geom_point(aes(X1, X2, color=label),
               size=0.2,
               data=show.grid)+
    geom_path(aes(X1, X2, group=paste(boundary, path.i),
                  linetype=boundary),
              size=1,
              data=pred.boundary)+
    geom_path(aes(X1, X2, group=paste(boundary, path.i),
                  linetype=boundary),
              color=set.colors[["Bayes"]],
              size=1,
              data=Bayes.boundary)+
    geom_point(aes(X1, X2, color=label),
               fill=NA,
               size=3,
               shape=21,
               data=show.data[set=="train",])+
    geom_text(aes(min.X1, X2.bottom, label=paste(set, "Error:")),
              data=error.text,
              hjust=0)+
    geom_text(aes(max.X1, X2.bottom, label=sprintf("%.3f", error.prop)),
              data=error.text,
              hjust=1)
  print(scatterPlot)

  errorPlot <- ggplot()+
    geom_hline(aes(yintercept=error.prop, color=set, linetype=set),
               data=Bayes.error)+
    scale_color_manual("error type", values=set.colors, breaks=names(set.colors))+
    scale_linetype_manual("error type", values=c(
      train="solid",
      validation="solid",
      test="solid",
      Bayes="dashed"),
      breaks=names(set.colors))+
    ylab("Misclassification Errors")+
    xlab("Number of Neighbors")+
    geom_linerange(aes(neighbors, ymin=mean-sd, ymax=mean+sd,
                       color=set),
                  data=validation.error)+
    geom_line(aes(neighbors, mean, linetype=set, color=set),
              data=validation.error)+
    geom_line(aes(neighbors, error.prop, group=set, linetype=set, color=set),
              data=other.error)+
    geom_point(aes(neighbors, mean, color=set),
               data=validation.error)+
    geom_point(aes(neighbors, error.prop, color=set),
               data=other.error)
  print(errorPlot)

  viz <- list(
    title="Figure 13.4 from Elements of Statistical Learning by Hastie et al",
    error=errorPlot,
    data=scatterPlot
    )
  library(animint)
  animint2dir(viz)

  viz <- list(
    title=paste0("training k-nearest-neighbors via ",
      n.folds, "-fold cross-validation"),
    error=ggplot()+
      geom_vline(aes(xintercept=neighbors, color=set),
		 size=1,
		 linetype="dashed",
		 data=min.test.error)+
      geom_rect(aes(xmin=neighbors-0.5, xmax=neighbors+0.5,
                    ymin=n.folds-0.5, ymax=n.folds+0.5,
                    color=set, size=fold, linetype=fold),
		fill="transparent",
		data=data.frame(
                  validation.stats.best, fold="mean", facet=fac("CV folds")))+
      geom_rect(aes(xmin=neighbors.combined-0.5, xmax=neighbors.combined+0.5,
                    ymin=n.folds-0.5, ymax=n.folds+0.5,
                    color=set, size=fold, 
                    linetype=fold,
                    key=n.folds,
                    showSelected=rule),
		fill="transparent",
		data=data.frame(best, fold="selected", facet=fac("CV folds")))+
      geom_text(aes(neighbors.combined+1, n.folds,
                    color=set, 
                    label=rule,
                    showSelected2=fold,
                    showSelected=rule),
		hjust=0,
		data=data.frame(best, fold="selected", facet=fac("CV folds")))+
      scale_size_manual(values=c(mean=2, selected=1))+
      theme_bw()+
      geom_ribbon(aes(neighbors, ymin=mean-sd, ymax=mean+sd, fill=set,
                      showSelected3=fold,
                      showSelected2=set,
                      showSelected=n.folds),
                  alpha=0.5,
                  data=data.frame(
                    validation.stats, fold="mean", facet=fac("percent error")))+
      geom_line(aes(neighbors, mean, color=set,
                    linetype=fold,
                    showSelected=n.folds),
		data=data.frame(
                  validation.stats, fold="mean", facet=fac("percent error")))+
      geom_point(aes(neighbors, mean, color=set,
                     showSelected2=fold,
                     showSelected=n.folds),
		 data=data.frame(
                   validation.stats.best,
                   fold="mean", facet=fac("percent error")))+
      theme(panel.margin=grid::unit(0, "cm"))+
      facet_grid(facet ~ ., scales="free")+
      scale_fill_manual(values=set.colors)+
      scale_color_manual(values=set.colors,
			 breaks=c("test", "validation", "train"))+
      scale_linetype_manual(values=c(mean="dashed", selected="solid"))+
      guides(
	fill="none",
	linetype=guide_legend(
          override.aes=list(colour=set.colors[["validation"]]))
	)+
      geom_line(aes(neighbors, error.prop,
                    linetype=fold,
                    showSelected=validation.fold,
                    showSelected2=n.folds,
                    group=set,
                    key=set,
                    color=set),
		data=data.frame(
                  error, fold="selected", facet=fac("percent error")))+
      make_tallrect(error, "neighbors")+
      geom_widerect(aes(ymin=n.folds-0.5, ymax=n.folds+0.5,
			clickSelects=n.folds),
                    alpha=0.5,
                    data=data.frame(
                      validation.stats.best, facet=fac("CV folds")))+
      geom_vline(aes(xintercept=neighbors.combined, color=set,
                     clickSelects=rule,
                     showSelected=n.folds),
		 size=4,
		 data=data.frame(best, facet=fac("validation fold")))+
      ylab("")+
      scale_x_continuous(
	"nearest neighbors", breaks=c(range(error$neighbors), 10, 20))+
      geom_segment(aes(0, error.prop,
                       xend=30, yend=error.prop,
                       color=set),
                   size=1,
                   data=data.frame(bayes.error, facet=fac("percent error")))+
      geom_text(aes(0, error.prop, color=set, label="Bayes"),
		hjust=1,
		data=data.frame(bayes.error, facet=fac("percent error")))+
      geom_text(aes(neighbors, 33, color=set,
                    clickSelects=validation.fold,
                    label=" best test error"),
		hjust=0,
		data=data.frame(min.test.error, facet=fac("percent error"))),
    data=ggplot()+
      theme_bw()+
      theme(panel.margin=grid::unit(0, "lines"))+
      facet_grid(. ~ set)+
      theme_animint(width=600)+
      geom_tile(aes(X1, X2, fill=probability,
                    showSelected=neighbors,
                    showSelected3=n.folds,
                    showSelected2=validation.fold),
		 data=show.grid)+
      xlab("Input feature 1")+
      ylab("Input feature 2")+
      geom_point(aes(X1, X2, size=status,
                     key=data.i,
                     showSelected=neighbors,
                     showSelected3=label,
                     showSelected4=n.folds,
                     showSelected2=validation.fold),
		 color="black",
		 data=show.data)+
      scale_color_manual(values=label.colors)+
      scale_fill_gradient2(
	low=label.colors[1], midpoint=0.5, high=label.colors[2])+
      scale_size_manual(values=c(error=5, correct=3.5))+
      geom_point(aes(X1, X2, color=label,
                     key=data.i,
                     showSelected=neighbors,
                     showSelected3=status,
                     showSelected2=validation.fold,
                     showSelected4=n.folds),
		 data=show.data)+
      geom_text(aes(X1, X2,
                    showSelected=neighbors,
                    label=paste0(
                      neighbors,
                      " nearest neighbor",
                      ifelse(neighbors==1, "", "s"),
                      " classifier")),
		data=show.neighbors)+
      geom_path(aes(X1, X2, group=path.i, linetype=boundary),
		data=data.frame(Bayes.boundary, boundary="Bayes"))+
      geom_path(aes(X1, X2, group=path.i, linetype=boundary,
                    key=paste(path.i, neighbors, n.folds, validation.fold),
                    showSelected=neighbors,
                    showSelected3=n.folds,
                    showSelected2=validation.fold),
		data=data.frame(pred.boundary, boundary="predicted")),
    first=list(
      n.folds=3,
      validation.fold="0",
      neighbors=min.test.error$neighbors
      ),
    time=list(variable="neighbors", ms=2000),
    duration=list(
      n.folds=1000,
      validation.fold=1000,
      neighbors=1000,
      rule=1000
      )
  )  
  viz$error + facet_grid(facet ~ n.folds, scales="free")

  animint2dir(viz, "figure-knn")



  fold.data$pred <- factor(pred.label)
  fold.data$is.error <- with(fold.data, pred != label)
  data.by.set <- split(fold.data, fold.data$set)
  for(set in c("train", "validation", "test")){
    if(set %in% names(data.by.set)){
      set.data <- data.by.set[[set]]
      errors <- sum(set.data$is.error)
      observations <- nrow(set.data)
      error.prop <- 100*errors/observations
      fold.error.list[[paste(neighbors, set)]] <- data.table(
	neighbors, set, errors, observations, error.prop)
    }
  }#for(set


  show.data <- subset(pred.data, set %in% c("train", "validation"))
  show.grid <- subset(pred.data, set == "grid")
  error.stats <- error[, list(
    mean=mean(error.prop), sd=sd(error.prop), error="knn"
    ), by=.(n.folds, set, neighbors)]
  validation.stats <- error.stats[set=="validation",]
  error.by.neighbors <- split(validation.error, validation.error$neighbors)
  full.error <- subset(error, validation.fold==0)
  full.error$error <- "knn"
  bayes.error <- data.frame(error.prop=21, set="test", error="Bayes")
  validation.stats.best <- validation.stats[, .SD[which.min(mean),], by=n.folds]
  one.full.error <- full.error[n.folds==min(n.folds), ]
  test.curve <- one.full.error[set=="test",]
  min.test.error <- test.curve[which.min(errors), ]

  show.data$status <- ifelse(show.data$is.error, "error", "correct")
  show.grid$set <- NULL
  min.test.error$n.folds <- NULL
  fac <- function(x){
    factor(x, c("CV folds", "validation fold", "percent error"))
  }
  show.neighbors <- show.grid[, list(
    X1=mean(range(X1)), X2=3.05), by=neighbors]
#+END_SRC


